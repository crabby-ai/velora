name: Release Crate

on:
  workflow_dispatch:
    inputs:
      crate:
        description: 'Crate to release'
        required: true
        type: choice
        options:
          - velora-core
          - velora-data
          - velora-exchange
          - velora-ta
          - velora-strategy
          - velora-backtest
          - velora-engine
          - velora-risk
          - velora
      dry_run:
        description: 'Dry run (skip actual publish)'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CRATE_NAME: ${{ inputs.crate }}
  DRY_RUN: ${{ inputs.dry_run }}

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      crate_name: ${{ steps.get_version.outputs.crate_name }}
      crate_path: ${{ steps.get_version.outputs.crate_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get crate version
        id: get_version
        run: |
          CRATE_PATH="crates/${CRATE_NAME}"
          VERSION=$(grep -m1 '^version' "${CRATE_PATH}/Cargo.toml" | cut -d'"' -f2)

          echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
          echo "crate_name=${CRATE_NAME}" >> "${GITHUB_OUTPUT}"
          echo "crate_path=${CRATE_PATH}" >> "${GITHUB_OUTPUT}"

          echo "📦 Crate: ${CRATE_NAME}"
          echo "🏷️  Version: ${VERSION}"
          echo "📁 Path: ${CRATE_PATH}"

      - name: Check if version exists on crates.io
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          echo "Checking if ${CRATE_NAME} ${VERSION} exists on crates.io..."

          # Check if version exists
          if cargo search "${CRATE_NAME}" | grep "^${CRATE_NAME} = \"${VERSION}\""; then
            echo "❌ Version ${VERSION} already published to crates.io"
            exit 1
          else
            echo "✅ Version ${VERSION} is new and can be published"
          fi

  test:
    name: Test Crate
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy -p "${CRATE_NAME}" --all-targets -- -D warnings

      - name: Run tests
        run: cargo test -p "${CRATE_NAME}" --all-features

      - name: Build release
        run: cargo build -p "${CRATE_NAME}" --release

  build-binaries:
    name: Build Binaries
    needs: [prepare, test]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build
        env:
          TARGET: ${{ matrix.target }}
        run: |
          cargo build -p "${CRATE_NAME}" --release --target "${TARGET}"

      - name: Package artifacts
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          TARGET: ${{ matrix.target }}
        run: |
          cd "target/${TARGET}/release"
          if [ "${{ runner.os }}" = "Windows" ]; then
            7z a "../../../${CRATE_NAME}-${VERSION}-${TARGET}.zip" *.exe || true
          else
            tar czf "../../../${CRATE_NAME}-${VERSION}-${TARGET}.tar.gz" "${CRATE_NAME}" || true
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{ matrix.target }}
          path: |
            *.tar.gz
            *.zip
          if-no-files-found: ignore

  create-release:
    name: Create GitHub Release
    needs: [prepare, test, build-binaries]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          # Find last tag for this crate
          LAST_TAG=$(git describe --tags --abbrev=0 --match="${CRATE_NAME}-v*" 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "First release for ${CRATE_NAME}"
            CHANGELOG="Initial release of ${CRATE_NAME} v${VERSION}"
          else
            echo "Generating changelog since ${LAST_TAG}"
            CHANGELOG=$(git log "${LAST_TAG}..HEAD" --pretty=format:"- %s" --no-merges -- "crates/${CRATE_NAME}/")
          fi

          # Write changelog to file
          cat > changelog.md << 'CHANGELOG_EOF'
          # Release Notes

          ## Installation

          ```toml
          [dependencies]
          CRATE_PLACEHOLDER = "VERSION_PLACEHOLDER"
          ```

          ## Changes

          CHANGELOG_PLACEHOLDER

          ## Documentation

          - [Documentation](https://docs.rs/CRATE_PLACEHOLDER/VERSION_PLACEHOLDER)
          - [Crates.io](https://crates.io/crates/CRATE_PLACEHOLDER)
          - [Repository](https://github.com/${{ github.repository }})

          ## Checksums

          See attached artifacts for platform-specific binaries.
          CHANGELOG_EOF

          # Safe replacements using sed
          sed -i "s/CRATE_PLACEHOLDER/${CRATE_NAME}/g" changelog.md
          sed -i "s/VERSION_PLACEHOLDER/${VERSION}/g" changelog.md
          sed -i "s|CHANGELOG_PLACEHOLDER|${CHANGELOG}|g" changelog.md

          cat changelog.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          TAG_NAME: ${{ needs.prepare.outputs.crate_name }}-v${{ needs.prepare.outputs.version }}
          RELEASE_NAME: ${{ needs.prepare.outputs.crate_name }} v${{ needs.prepare.outputs.version }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_NAME }}
          body_path: changelog.md
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    needs: [prepare, test, create-release]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Publish to crates.io
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "📦 Publishing ${CRATE_NAME} v${VERSION} to crates.io..."

          cd "crates/${CRATE_NAME}"
          cargo publish --token "${CARGO_REGISTRY_TOKEN}" --allow-dirty

          echo "✅ Successfully published ${CRATE_NAME} v${VERSION}"

      - name: Verify publication
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          echo "Waiting for crates.io to index the package..."
          sleep 30

          echo "Verifying publication..."
          if cargo search "${CRATE_NAME}" | grep "^${CRATE_NAME} = \"${VERSION}\""; then
            echo "✅ Verified: ${CRATE_NAME} v${VERSION} is live on crates.io"
          else
            echo "⚠️  Warning: Could not verify publication (may take time to index)"
          fi

  notify-success:
    name: Notify Success
    needs: [prepare, publish-crate]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run && success() }}
    steps:
      - name: Post success message
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          REPO: ${{ github.repository }}
        run: |
          echo "🎉 Successfully released ${CRATE_NAME} v${VERSION}"
          echo ""
          echo "📦 crates.io: https://crates.io/crates/${CRATE_NAME}"
          echo "📖 docs.rs: https://docs.rs/${CRATE_NAME}"
          echo "🏷️  GitHub: https://github.com/${REPO}/releases/tag/${CRATE_NAME}-v${VERSION}"
